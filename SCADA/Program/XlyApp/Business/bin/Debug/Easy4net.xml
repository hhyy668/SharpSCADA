<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easy4net</name>
    </assembly>
    <members>
        <member name="T:Easy4net.Common.ColumnInfo">
            <summary>
            数据库字段名跟值键值对试题类
            </summary>
        </member>
        <member name="T:Easy4net.Common.CommonUtils">
            <summary>
            通用实用工具
            </summary>
        </member>
        <member name="M:Easy4net.Common.CommonUtils.EnumParse``1(System.String)">
            <summary>
            用于字符串和枚举类型的转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.CommonUtils.GetConfigValueByKey(System.String)">
            <summary>
            根据传入的Key获取配置文件中的Value值
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.CommonUtils.IsNullOrEmpty(System.Object)">
            <summary>
            检测输入值是否为空
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Common.DbCondition">
            <summary>
            数据库条件语句生成器
            </summary>
        </member>
        <member name="F:Easy4net.Common.DbCondition.paramChar">
            <summary>
            参数字符前缀
            </summary>
        </member>
        <member name="F:Easy4net.Common.DbCondition.sbSQL">
            <summary>
            SQL语句创建对象
            </summary>
        </member>
        <member name="F:Easy4net.Common.DbCondition.queryString">
            <summary>
            查询SQL语句
            </summary>
        </member>
        <member name="F:Easy4net.Common.DbCondition.Columns">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="M:Easy4net.Common.DbCondition.#ctor">
            <summary>
            根据配置文件创建一个默认的条件语句生成器
            </summary>
        </member>
        <member name="M:Easy4net.Common.DbCondition.#ctor(System.String)">
            <summary>
            根据配置文件创建一个默认的条件语句生成器
            </summary>
            <param name="query">查询语句</param>
        </member>
        <member name="M:Easy4net.Common.DbCondition.Query(System.String)">
            <summary>
            传入查询语句
            </summary>
            <param name="query">查询语句</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.Where">
            <summary>
            增加Where关键字
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.Where(System.String,System.Object)">
            <summary>
            增加Where等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.Equal(System.String,System.Object)">
            <summary>
            增加等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.AndEqual(System.String,System.Object)">
            <summary>
            增加And等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrEqual(System.String,System.Object)">
            <summary>
            增加Or等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.GreaterThan(System.String,System.Object)">
            <summary>
            增加大于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.GreaterThanEqual(System.String,System.Object)">
            <summary>
            增加大于等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.AndGreaterThan(System.String,System.Object)">
            <summary>
            增加And大于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.AndGreaterThanEqual(System.String,System.Object)">
            <summary>
            增加And大于等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrGreaterThan(System.String,System.Object)">
            <summary>
            增加Or大于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrGreaterThanEqual(System.String,System.Object)">
            <summary>
            增加Or大于等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.LessThan(System.String,System.Object)">
            <summary>
            增加小于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.LessThanEqual(System.String,System.Object)">
            <summary>
            增加小于等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.AndLessThan(System.String,System.Object)">
            <summary>
            增加And小于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.AndLessThanEqual(System.String,System.Object)">
            <summary>
            增加And小于等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrLessThan(System.String,System.Object)">
            <summary>
            增加Or小于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrLessThanEqual(System.String,System.Object)">
            <summary>
            增加Or小于等于语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.And(System.String,System.Object)">
            <summary>
            增加And等于语句,相当于AndEqual方法
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.Or(System.String,System.Object)">
            <summary>
            增加Or等于语句,相当于OrEqual方法
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrderByASC(System.String)">
            <summary>
            增加Order By Asc递增排序语句
            </summary>
            <param name="fieldName">排序的字段名</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrderByDESC(System.String)">
            <summary>
            增加Order By Desc递减排序语句
            </summary>
            <param name="fieldName">排序的字段名</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.Like(System.String,System.Object)">
            <summary>
            增加Like %XX%语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.AndLike(System.String,System.Object)">
            <summary>
            增加And Like %XX%语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrLike(System.String,System.Object)">
            <summary>
            增加Or Like %XX%语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.LeftLike(System.String,System.Object)">
            <summary>
            增加Like %XX语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.AndLeftLike(System.String,System.Object)">
            <summary>
            增加And Like %XX语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrLeftLike(System.String,System.Object)">
            <summary>
            增加Or Like %XX语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.RightLike(System.String,System.Object)">
            <summary>
            增加Like XX%语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.AndRightLike(System.String,System.Object)">
            <summary>
            增加And Like XX%语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.OrRightLike(System.String,System.Object)">
            <summary>
            增加Or Like XX%语句
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.ToString">
            <summary>
            输出本条件对象的字符串描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DbCondition.formatKey(System.String)">
            <summary>
            对关键字进行格式化输出
            </summary>
            <param name="key">要格式化的关键字</param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Common.DbKeywords">
            <summary>
            数据库关键字检查帮助类
            </summary>
        </member>
        <member name="F:Easy4net.Common.DbKeywords.m_MySQL">
            <summary>
            MySQL中关键字集合
            </summary>
        </member>
        <member name="F:Easy4net.Common.DbKeywords.m_MSSQL">
            <summary>
            MSSQL中关键字集合
            </summary>
        </member>
        <member name="M:Easy4net.Common.DbKeywords.InitMySQL">
            <summary>
            初始化MySQL中关键字集合
            </summary>
        </member>
        <member name="M:Easy4net.Common.DbKeywords.InitMSSQL">
            <summary>
            初始化MSSQL中关键字集合
            </summary>
        </member>
        <member name="M:Easy4net.Common.DbKeywords.FormatColumnName(System.String,Easy4net.DBUtility.DatabaseType)">
            <summary>
            格式化列名,对列名与数据库关键字相同的进行格式化处理
            </summary>
            <param name="columnName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Common.EntityHelper">
            <summary>
            实体帮助类
            </summary>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetTableAttribute(System.Type,Easy4net.DBUtility.DbOperateType)">
            <summary>
            根据实体类类型和数据操作类型获取数据库表特性
            </summary>
            <param name="classType">数据库表实例类型</param>
            <param name="type">数据操作类型</param>
            <returns>数据库表特性</returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetPrimaryKey(System.Object,Easy4net.DBUtility.DbOperateType)">
            <summary>
            根据主键特性跟数据操作类型获取主键名
            </summary>
            <param name="attribute">IdAttribute主键特性</param>
            <param name="type">数据操作类型</param>
            <returns>主键名</returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetColumnName(System.Object)">
            <summary>
            根据字段特性或主键特性获取对应字段名
            </summary>
            <param name="attribute">字段特性或主键特性</param>
            <returns>字段名</returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetTableInfo(System.Object,Easy4net.DBUtility.DbOperateType,System.Reflection.PropertyInfo[])">
            <summary>
            根据数据库表对象及数据操作类型获取表信息
            </summary>
            <param name="entity">数据库表对象</param>
            <param name="dbOpType">操作类型</param>
            <param name="properties">数据库表对象属性集合</param>
            <returns>数据库表信息</returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetPrimaryKeyPropertyInfo(System.Object,System.Reflection.PropertyInfo[])">
            <summary>
            根据数据库表对象获取该对象中主键成员的属性
            </summary>
            <param name="entity">数据库表对象</param>
            <param name="properties">该对象的属性集合</param>
            <returns>主键成员属性</returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.toList``1(System.Data.IDataReader,Easy4net.Common.TableInfo,System.Reflection.PropertyInfo[])">
            <summary>
            根据数据库表信息从DataReader中读取对应实体类的数据集合
            </summary>
            <typeparam name="T">数据库表实体类</typeparam>
            <param name="sdr">DataReader</param>
            <param name="tableInfo">数据库表信息</param>
            <param name="properties">实体类属性集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.toList``1(System.Data.IDataReader)">
            <summary>
            从DataReader中读取指定数据库表类型的数据集合
            </summary>
            <typeparam name="T">数据库表实体类</typeparam>
            <param name="sdr">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetFindSql(Easy4net.Common.TableInfo,Easy4net.Common.DbCondition)">
            <summary>
            根据数据库表信息及条件生成器获取Select语句
            </summary>
            <param name="tableInfo">数据库表信息</param>
            <param name="condition">条件生成器</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetFindAllSql(Easy4net.Common.TableInfo)">
            <summary>
            根据数据库表信息获取Selet All语句
            </summary>
            <param name="tableInfo">数据库表信息</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetFindByIdSql(Easy4net.Common.TableInfo)">
            <summary>
            根据数据库表信息获取根据主键值进行查询的SQL语句
            </summary>
            <param name="tableInfo">数据库表信息</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetFindCountSql(Easy4net.Common.TableInfo)">
            <summary>
            根据数据库表信息获取查询记录条数的SQL语句
            </summary>
            <param name="tableInfo">数据库表信息</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetFindCountSql(Easy4net.Common.TableInfo,Easy4net.Common.DbCondition)">
            <summary>
            根据数据库表信息及条件生成器获取查询记录条数的SQL语句
            </summary>
            <param name="tableInfo">数据库表信息</param>
            <param name="condition">条件生成器</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetFindByPropertySql(Easy4net.Common.TableInfo)">
            <summary>
            根据数据库表信息获取根据主键值进行查询的SQL语句
            同方法GetFindByIdSql
            </summary>
            <param name="tableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetAutoSql(Easy4net.DBUtility.DatabaseType)">
            <summary>
            根据数据库类型获取对应的获取在插入操作后自增长型主键字段的SQL语句
            </summary>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetInsertSql(Easy4net.Common.TableInfo)">
            <summary>
            根据数据库表信息获取Insert插入操作语句
            </summary>
            <param name="tableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetUpdateSql(Easy4net.Common.TableInfo)">
            <summary>
            根据数据库表信息获取Update更新操作语句
            </summary>
            <param name="tableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.GetDeleteByIdSql(Easy4net.Common.TableInfo)">
            <summary>
            根据数据库表信息获取根据主键进行Delete删除操作语句
            </summary>
            <param name="tableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.SetParameters(Easy4net.Common.ColumnInfo,System.Data.IDbDataParameter[])">
            <summary>
            将字段信息集合设置到参数数组中
            </summary>
            <param name="columns">字段信息集合</param>
            <param name="parms">[输出] 参数值集合</param>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.IsCaseColumn(System.Object,Easy4net.DBUtility.DbOperateType)">
            <summary>
            根据操作类型判断输入的字段特性中指定的字段是否进行忽略
            </summary>
            <param name="attribute">字段特性ColumnAttribute,如果不为此特性则不进行忽略检测</param>
            <param name="dbOperateType">操作类型</param>
            <returns>true忽略此字段</returns>
        </member>
        <member name="M:Easy4net.Common.EntityHelper.IsCaseColumn(System.Reflection.PropertyInfo,Easy4net.DBUtility.DbOperateType)">
            <summary>
            根据操作类型判断输入的成员属性中指定的成员是否进行忽略
            </summary>
            <param name="property">成员属性</param>
            <param name="dbOperateType">数据操作</param>
            <returns>true忽略此属性中的成员</returns>
        </member>
        <member name="T:Easy4net.Common.FastInvokeHandler">
            <summary>Delegate for calling a method that is not known at runtime.</summary>
            <param name="target">the object to be called or null if the call is to a static method.</param>
            <param name="parameters">the parameters to the method.</param>
            <returns>the return value for the method or null if it doesn't return anything.</returns>
        </member>
        <member name="T:Easy4net.Common.FastCreateInstanceHandler">
            <summary>Delegate for creating and object at runtime using the default constructor.</summary>
            <returns>the newly created object.</returns>
        </member>
        <member name="T:Easy4net.Common.FastPropertyGetHandler">
            <summary>Delegate to get an arbitraty property at runtime.</summary>
            <param name="target">the object instance whose property will be obtained.</param>
            <returns>the property value.</returns>
        </member>
        <member name="T:Easy4net.Common.FastPropertySetHandler">
            <summary>Delegate to set an arbitrary property at runtime.</summary>
            <param name="target">the object instance whose property will be modified.</param>
            <param name="parameter"></param>
        </member>
        <member name="T:Easy4net.Common.DynamicCalls">
            <summary>Class with helper methods for dynamic invocation generating IL on the fly.</summary>
        </member>
        <member name="F:Easy4net.Common.DynamicCalls.dictInvoker">
            <summary>
            用于存放GetMethodInvoker的Dictionary
            </summary>
        </member>
        <member name="M:Easy4net.Common.DynamicCalls.GetMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            快速执行指定方法
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="F:Easy4net.Common.DynamicCalls.dictCreator">
            <summary>
            用于存放GetInstanceCreator的Dictionary
            </summary>
        </member>
        <member name="M:Easy4net.Common.DynamicCalls.GetInstanceCreator(System.Type)">
            <summary>Gets the instance creator delegate that can be use to create instances of the specified type.</summary>
            <param name="type">The type of the objects we want to create.</param>
            <returns>A delegate that can be used to create the objects.</returns>
        </member>
        <member name="F:Easy4net.Common.DynamicCalls.dictGetter">
            <summary>
            用于存放GetPropertyGetter的Dictionary
            </summary>
        </member>
        <member name="M:Easy4net.Common.DynamicCalls.GetPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            快速获取成员属性
            </summary>
            <param name="propInfo"></param>
            <returns></returns>
        </member>
        <member name="F:Easy4net.Common.DynamicCalls.dictSetter">
            <summary>
            用于存放SetPropertySetter的Dictionary
            </summary>
        </member>
        <member name="M:Easy4net.Common.DynamicCalls.GetPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            快速设置成员属性
            </summary>
            <param name="propInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.DynamicCalls.EmitCastToReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Emits the cast to a reference, unboxing if needed.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="type">The type to cast.</param>
        </member>
        <member name="M:Easy4net.Common.DynamicCalls.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Boxes a type if needed.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Easy4net.Common.DynamicCalls.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>Emits code to save an integer to the evaluation stack.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="value">The value to push.</param>
        </member>
        <member name="T:Easy4net.Common.IdInfo">
            <summary>
            主键字段信息
            </summary>
        </member>
        <member name="F:Easy4net.Common.IdInfo.key">
            <summary>
            主键字段名
            </summary>
        </member>
        <member name="F:Easy4net.Common.IdInfo.value">
            <summary>
            主键字段值
            </summary>
        </member>
        <member name="P:Easy4net.Common.IdInfo.Key">
            <summary>
            主键字段名
            </summary>
        </member>
        <member name="P:Easy4net.Common.IdInfo.Value">
            <summary>
            主键字段值
            </summary>
        </member>
        <member name="T:Easy4net.Common.Map">
            <summary>
            键值对映射类
            </summary>
        </member>
        <member name="M:Easy4net.Common.Map.Put(System.Object,System.Object)">
            <summary>
            设置/添加键值对
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Easy4net.Common.Map.setParameter(System.String,System.Object)">
            <summary>
            设置/添加参数
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Easy4net.Common.PageResult`1">
            <summary>
            分页查询结果
            </summary>
            <typeparam name="T">数据库表实体类</typeparam>
        </member>
        <member name="P:Easy4net.Common.PageResult`1.Total">
            <summary>
            分页查询中总记录数
            </summary>
        </member>
        <member name="P:Easy4net.Common.PageResult`1.page">
            <summary>
            第几页
            </summary>
        </member>
        <member name="P:Easy4net.Common.PageResult`1.pagesize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:Easy4net.Common.PageResult`1.DataList">
            <summary>
            分页查询中结果集合
            </summary>
        </member>
        <member name="T:Easy4net.Common.ParamMap">
            <summary>
            参数映射集合类
            </summary>
        </member>
        <member name="F:Easy4net.Common.ParamMap.isPage">
            <summary>
            是否分页
            </summary>
        </member>
        <member name="F:Easy4net.Common.ParamMap.pageOffset">
            <summary>
            页面偏移量
            </summary>
        </member>
        <member name="F:Easy4net.Common.ParamMap.pageLimit">
            <summary>
            每页限制记录数
            </summary>
        </member>
        <member name="F:Easy4net.Common.ParamMap.orderFields">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="F:Easy4net.Common.ParamMap.isDesc">
            <summary>
            是否递减排序
            </summary>
        </member>
        <member name="F:Easy4net.Common.ParamMap.m_ParamList">
            <summary>
            数据库参数集合
            </summary>
        </member>
        <member name="M:Easy4net.Common.ParamMap.#ctor">
            <summary>
            创建一个参数映射集合
            </summary>
        </member>
        <member name="P:Easy4net.Common.ParamMap.OrderFields">
            <summary>
            排序的字段
            </summary>
        </member>
        <member name="P:Easy4net.Common.ParamMap.IsDesc">
            <summary>
            是否递减排序
            </summary>
        </member>
        <member name="M:Easy4net.Common.ParamMap.newMap">
            <summary>
            创建一个参数映射集合
            </summary>
            <returns></returns>
        </member>
        <member name="P:Easy4net.Common.ParamMap.IsPage">
            <summary>
            是否进行分页
            </summary>
        </member>
        <member name="P:Easy4net.Common.ParamMap.PageOffset">
            <summary>
            每页的偏移量
            </summary>
        </member>
        <member name="P:Easy4net.Common.ParamMap.PageLimit">
            <summary>
            每页的记录条数限制
            </summary>
        </member>
        <member name="M:Easy4net.Common.ParamMap.getInt(System.String)">
            <summary>
            根据键值获取整型数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ParamMap.getString(System.String)">
            <summary>
            根据键值获取字符串数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ParamMap.toDouble(System.String)">
            <summary>
            根据键值获取Double型数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ParamMap.toLong(System.String)">
            <summary>
            根据键值获取Long型数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ParamMap.toDecimal(System.String)">
            <summary>
            根据键值获取Decimal型数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ParamMap.toDateTime(System.String)">
            <summary>
            根据键值获取DateTime型数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ParamMap.setOrderFields(System.String,System.Boolean)">
            <summary>
            设置排序字段及排序方式
            </summary>
            <param name="orderFields">排序字段</param>
            <param name="isDesc">是否为递减排序</param>
        </member>
        <member name="M:Easy4net.Common.ParamMap.setPageIndex(System.Int32)">
            <summary>
            此方法已过时，请使用 setPageParamters方法分页
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="M:Easy4net.Common.ParamMap.setPageSize(System.Int32)">
            <summary>
            此方法已过时，请使用 setPageParamters方法分页
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="M:Easy4net.Common.ParamMap.setPageParamters(System.Int32,System.Int32)">
            <summary>
            分页参数设置
            </summary>
            <param name="page">第几页，从0开始</param>
            <param name="limit">每页最多显示几条数据</param>
        </member>
        <member name="M:Easy4net.Common.ParamMap.setPages">
            <summary>
            设置分页参数
            </summary>
        </member>
        <member name="M:Easy4net.Common.ParamMap.Add(System.Object,System.Object)">
            <summary>
            添加键值对映射
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Easy4net.Common.ParamMap.Put(System.Object,System.Object)">
            <summary>
            添加键值对映射
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Easy4net.Common.ParamMap.setParameter(System.String,System.Object)">
            <summary>
            添加键值对映射
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Easy4net.Common.ParamMap.toDbParameters">
            <summary>
            输出参数集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Common.ReflectionHelper">
            <summary>
            实体类反射帮助类
            </summary>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.GetProperties(System.Type)">
            <summary>
            根据输入类型获取对应的成员属性集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.GetFields(System.Type)">
            <summary>
            根据输入类型获取对应的字段属性集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.FastMethodInvoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            快速执行Method
            </summary>
            <param name="obj"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.Create``1">
            <summary>
            快速实例化一个T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.Create(System.Type)">
            <summary>
            快速实例化一个FastCreateInstanceHandler
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.SetPropertyValue(System.Type,System.Object,System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="type"></param>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.GetPropertyValue``1(``0,System.String)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.GetPropertyValue``1(``0,System.Reflection.PropertyInfo)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.ReflectionHelper.GetPropertyType(System.Type,System.String)">
            <summary>
            获取属性类型
            </summary>
            <param name="classType"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Common.SQLBuilderHelper">
            <summary>
            SQL语句创建帮助类
            </summary>
        </member>
        <member name="F:Easy4net.Common.SQLBuilderHelper.mssqlPageTemplate">
            <summary>
            MSSQL分页语句模版
            </summary>
        </member>
        <member name="F:Easy4net.Common.SQLBuilderHelper.mysqlOrderPageTemplate">
            <summary>
            MySQL排序分页语句模版
            </summary>
        </member>
        <member name="F:Easy4net.Common.SQLBuilderHelper.mysqlPageTemplate">
            <summary>
            MySQL分页语句模板
            </summary>
        </member>
        <member name="F:Easy4net.Common.SQLBuilderHelper.sqliteOrderPageTemplate">
            <summary>
            SQLite排序分页语句模板
            </summary>
        </member>
        <member name="F:Easy4net.Common.SQLBuilderHelper.sqlitePageTemplate">
            <summary>
            SQLite分页语句模板
            </summary>
        </member>
        <member name="F:Easy4net.Common.SQLBuilderHelper.accessPageTemplate">
            <summary>
            ACCESS分页语句模板
            </summary>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.fetchColumns(System.String)">
            <summary>
            从SQL语句中获取查询的列名集合
            Select 与 From中间的部分
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.fetchPageBody(System.String)">
            <summary>
            从SQL语句中获取分页语句
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.fetchWhere(System.String)">
            <summary>
            从SQL语句中获取查询语句
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.isPage(System.String)">
            <summary>
            根据SQL语句判断是否为分页语句
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.builderPageSQL(System.String,System.String,System.Boolean)">
            <summary>
            根据SQL语句及排序条件创建分页语句
            </summary>
            <param name="strSql">SQL语句</param>
            <param name="order">排序字段</param>
            <param name="desc">是否为递减排序</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.builderCountSQL(System.String)">
            <summary>
            根据SQL语句创建一个获取记录数的SQL语句
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.builderAccessPageSQL(System.String,Easy4net.Common.ParamMap)">
            <summary>
            创建ACCESS数据库的分页SQL语句
            </summary>
            <param name="strSql"></param>
            <param name="param">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.builderAccessPageSQL(System.String,Easy4net.Common.ParamMap,System.Int32)">
            <summary>
            创建ACCESS的分页SQL语句
            </summary>
            <param name="strSql"></param>
            <param name="param">参数集合</param>
            <param name="limit">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.builderAccessSQL(System.Type,Easy4net.Common.TableInfo,System.String,System.Data.IDbDataParameter[])">
            <summary>
            创建ACCESS的SQL语句
            </summary>
            <param name="classType">数据库表实体对象类型</param>
            <param name="tableInfo">表信息</param>
            <param name="strSql">SQL语句</param>
            <param name="parameters">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.SQLBuilderHelper.builderAccessSQL(System.String,System.Data.IDbDataParameter[])">
            <summary>
            创建ACCESS SQL语句
            </summary>
            <param name="strSql"></param>
            <param name="parameters">参数集合</param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Common.TableInfo">
            <summary>
            数据库表信息实体类
            </summary>
        </member>
        <member name="F:Easy4net.Common.TableInfo.tableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="F:Easy4net.Common.TableInfo.strategy">
            <summary>
            主键生成方式
            </summary>
        </member>
        <member name="F:Easy4net.Common.TableInfo.id">
            <summary>
            主键信息
            </summary>
        </member>
        <member name="F:Easy4net.Common.TableInfo.columns">
            <summary>
            普通字段信息集合
            </summary>
        </member>
        <member name="F:Easy4net.Common.TableInfo.propToColumn">
            <summary>
            属性到字段信息的映射集合
            </summary>
        </member>
        <member name="F:Easy4net.Common.TableInfo.columnToProp">
            <summary>
            字段信息到属性的映射集合
            </summary>
        </member>
        <member name="P:Easy4net.Common.TableInfo.NoAutomaticKey">
            <summary>
            是否不具备自增长键
            </summary>
        </member>
        <member name="P:Easy4net.Common.TableInfo.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="P:Easy4net.Common.TableInfo.Strategy">
            <summary>
            主键生成方式,参考GenerationType定义
            </summary>
        </member>
        <member name="P:Easy4net.Common.TableInfo.Id">
            <summary>
            主键字段信息
            </summary>
        </member>
        <member name="P:Easy4net.Common.TableInfo.Columns">
            <summary>
            普通字段信息集合
            </summary>
        </member>
        <member name="P:Easy4net.Common.TableInfo.PropToColumn">
            <summary>
            实体类属性对应字段信息映射集合
            </summary>
        </member>
        <member name="P:Easy4net.Common.TableInfo.ColumnToProp">
            <summary>
            字段信息对应实体类属性映射集合
            </summary>
        </member>
        <member name="M:Easy4net.Common.TableInfo.GetParameterList">
            <summary>
            获取本数据库表信息中的参数键值集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.TableInfo.GetParameters(System.Collections.Generic.List{System.Data.IDbDataParameter})">
            <summary>
            将参数集合转为参数数组
            </summary>
            <param name="paramList">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.TableInfo.GetParameters">
            <summary>
            获取本数据库表信息中的参数键值数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Common.TypeUtils">
            <summary>
            类型单元帮助类
            </summary>
        </member>
        <member name="M:Easy4net.Common.TypeUtils.ConvertForType(System.Object,System.Type)">
            <summary>
            根据数据类型将指定数据进行相应转换
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.TypeUtils.GetTypeName(System.Type)">
            <summary>
            获取类型名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.TypeUtils.isNullOrEmpty(System.Object)">
            <summary>
            检查输入值是否为空
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:Easy4net.Common.WhereExpression.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Easy4net.Common.WhereExpression.IsAll">
            <summary>
            是否检索全部数据  1=1
            </summary>
        </member>
        <member name="P:Easy4net.Common.WhereExpression.IsSingle">
            <summary>
            是否为单独的查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.WhereExpression.op_BitwiseAnd(Easy4net.Common.WhereExpression,Easy4net.Common.WhereExpression)">
            <summary>
            And
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Common.WhereExpression.op_BitwiseOr(Easy4net.Common.WhereExpression,Easy4net.Common.WhereExpression)">
            <summary>
            Or
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.CustomAttributes.ColumnAttribute">
            <summary>
            数据库表字段特性
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.ColumnAttribute._Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.ColumnAttribute._IsUnique">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.ColumnAttribute._IsNull">
            <summary>
            是否允许为空
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.ColumnAttribute._IsInsert">
            <summary>
            是否插入到表中
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.ColumnAttribute._IsUpdate">
            <summary>
            是否修改到表中
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.ColumnAttribute._Ignore">
            <summary>
            在所有操作中是否忽略此字段
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.ColumnAttribute.Name">
            <summary>
            表字段名
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.ColumnAttribute.IsUnique">
            <summary>
            是否是唯一的,默认为否
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.ColumnAttribute.IsNull">
            <summary>
            此字段是否允许为空,默认允许为空
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.ColumnAttribute.IsInsert">
            <summary>
            在执行插入操作时此是否插入此字段值,默认为插入
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.ColumnAttribute.IsUpdate">
            <summary>
            在执行更新操作时是否更新此字段值,默认为更新
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.ColumnAttribute.Ignore">
            <summary>
            在执行所有操作时是否忽略此字段,默认不忽略
            </summary>
        </member>
        <member name="M:Easy4net.CustomAttributes.ColumnAttribute.#ctor">
            <summary>
            创建一个空的字段特性
            </summary>
        </member>
        <member name="M:Easy4net.CustomAttributes.ColumnAttribute.#ctor(System.String)">
            <summary>
            创建一个指定字段名的字段特性
            </summary>
            <param name="aName">字段名</param>
        </member>
        <member name="M:Easy4net.CustomAttributes.ColumnAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            创建一个制定字段名的字段特性
            </summary>
            <param name="aName">字段名</param>
            <param name="aIgnore">在执行数据操作时是否忽略此字段</param>
        </member>
        <member name="M:Easy4net.CustomAttributes.ColumnAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            创建一个制定字段名的字段特性
            </summary>
            <param name="aName">字段名</param>
            <param name="aInsert">此字段是否参与插入操作</param>
            <param name="aUpdate">此字段是否参与更新操作</param>
        </member>
        <member name="T:Easy4net.CustomAttributes.GenerationType">
            <summary>
            数据库表主键生成类型定义
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.GenerationType.INDENTITY">
            <summary>
            自动增长型
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.GenerationType.GUID">
            <summary>
            GUID型
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.GenerationType.FILL">
            <summary>
            提前生成并填充
            </summary>
        </member>
        <member name="T:Easy4net.CustomAttributes.IdAttribute">
            <summary>
            数据库主键字段特性
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.IdAttribute._Name">
            <summary>
            主键字段名
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.IdAttribute.Name">
            <summary>
            主键字段名
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.IdAttribute.Strategy">
            <summary>
            主键字段生成方式,参考GenerationType定义
            </summary>
        </member>
        <member name="M:Easy4net.CustomAttributes.IdAttribute.#ctor">
            <summary>
            创建一个默认的主键特性,字段生成方式为自动增长型
            </summary>
        </member>
        <member name="M:Easy4net.CustomAttributes.IdAttribute.#ctor(System.String)">
            <summary>
            创建一个制定字段名的主键特性,字段生成方式为自动增长型
            </summary>
            <param name="aName">主键字段名</param>
        </member>
        <member name="T:Easy4net.CustomAttributes.TableAttribute">
            <summary>
            数据库表特性
            </summary>
        </member>
        <member name="F:Easy4net.CustomAttributes.TableAttribute._Name">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="M:Easy4net.CustomAttributes.TableAttribute.#ctor">
            <summary>
            创建一个空的数据库表特性,默认具备自增长键
            </summary>
        </member>
        <member name="M:Easy4net.CustomAttributes.TableAttribute.#ctor(System.String)">
            <summary>
            创建一个制定表明的数据库表特性,默认具备自增长键
            </summary>
            <param name="aName">数据库表名</param>
        </member>
        <member name="P:Easy4net.CustomAttributes.TableAttribute.Name">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:Easy4net.CustomAttributes.TableAttribute.NoAutomaticKey">
            <summary>
            不具备自增长键的表
            </summary>
        </member>
        <member name="T:Easy4net.DBUtility.AdoHelper">
            <summary>
            数据库操作帮助类
            </summary>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteNonQuery(Easy4net.DBUtility.DbFactory,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
             <summary>
            通过提供的参数，执行无结果集的数据库操作命令
             并返回执行数据库操作所影响的行数。
             </summary>
             <param name="dbFactory">数据库配置对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <param name="commandParameters">执行命令所需的参数数组</param>
             <returns>返回通过执行命令所影响的行数</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteNonQuery(Easy4net.DBUtility.DbFactory,System.Data.CommandType,System.String)">
             <summary>
            通过提供的参数，执行无结果集的数据库操作命令
             并返回执行数据库操作所影响的行数。
             </summary>
             <param name="dbFactory">数据库配置对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回通过执行命令所影响的行数</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteNonQuery(Easy4net.DBUtility.DbFactory,System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
             <summary>
            通过提供的参数，执行无结果集返回的数据库操作命令
            并返回执行数据库操作所影响的行数。
             </summary>
             <remarks>
             e.g.:  
              int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="connection">数据库连接对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <param name="commandParameters">执行命令所需的参数数组</param>
             <returns>返回通过执行命令所影响的行数</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteNonQuery(Easy4net.DBUtility.DbFactory,System.Data.IDbConnection,System.Data.CommandType,System.String)">
             <summary>
            通过提供的参数，执行无结果集返回的数据库操作命令
            并返回执行数据库操作所影响的行数。
             </summary>
             <remarks>
             e.g.:  
              int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="connection">数据库连接对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回通过执行命令所影响的行数</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteNonQuery(Easy4net.DBUtility.DbFactory,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String)">
             <summary>
            通过提供的参数，执行无结果集返回的数据库操作命令
            并返回执行数据库操作所影响的行数。
             </summary>
             <remarks>
             e.g.:  
              int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="connection">数据库连接对象</param>
             <param name="transaction"></param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回通过执行命令所影响的行数</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteNonQuery(Easy4net.DBUtility.DbFactory,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
             <summary>
            通过提供的参数，执行无结果集返回的数据库操作命令
            并返回执行数据库操作所影响的行数。
             </summary>
             <remarks>
             e.g.:  
              int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="connection">数据库连接对象</param>
             <param name="transaction"></param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <param name="commandParameters"></param>
             <returns>返回通过执行命令所影响的行数</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteNonQuery(Easy4net.DBUtility.DbFactory,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
             <summary>
            通过提供的参数，执行无结果集返回的数据库操作命令
            并返回执行数据库操作所影响的行数。
             </summary>
             <remarks>
             e.g.:  
              int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="trans">sql事务对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <param name="commandParameters">执行命令所需的参数数组</param>
             <returns>返回通过执行命令所影响的行数</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteNonQuery(Easy4net.DBUtility.DbFactory,System.Data.IDbTransaction,System.Data.CommandType,System.String)">
             <summary>
            通过提供的参数，执行无结果集返回的数据库操作命令
            并返回执行数据库操作所影响的行数。
             </summary>
             <remarks>
             e.g.:  
              int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="trans">sql事务对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回通过执行命令所影响的行数</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteReader(Easy4net.DBUtility.DbFactory,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            使用提供的参数，执行有结果集返回的数据库操作命令
            并返回SqlDataReader对象
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="dbFactory">数据库配置对象</param>
            <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
            <param name="cmdText">存储过程名称或者T-SQL命令行</param>
            <param name="commandParameters">执行命令所需的参数数组</param>
            <returns>返回SqlDataReader对象</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteReader(Easy4net.DBUtility.DbFactory,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            使用提供的参数，执行有结果集返回的数据库操作命令
            并返回SqlDataReader对象
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="dbFactory">数据库配置对象</param>
            <param name="trans"></param>
            <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
            <param name="cmdText">存储过程名称或者T-SQL命令行</param>
            <param name="commandParameters">执行命令所需的参数数组</param>
            <returns>返回SqlDataReader对象</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteReader(Easy4net.DBUtility.DbFactory,System.Boolean,System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            使用提供的参数，执行有结果集返回的数据库操作命令
            并返回SqlDataReader对象
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="dbFactory">数据库配置对象</param>
            <param name="closeConnection">读取完关闭Reader是否同时也关闭数据库连接</param>
            <param name="connection">数据库链接</param>
            <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
            <param name="cmdText">存储过程名称或者T-SQL命令行</param>
            <param name="commandParameters">执行命令所需的参数数组</param>
            <returns>返回SqlDataReader对象</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteReader(Easy4net.DBUtility.DbFactory,System.Data.CommandType,System.String)">
             <summary>
            使用提供的参数，执行有结果集返回的数据库操作命令
             并返回SqlDataReader对象
             </summary>
             <param name="dbFactory">数据库配置对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回SqlDataReader对象</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteReader(Easy4net.DBUtility.DbFactory,System.Data.IDbTransaction,System.Data.CommandType,System.String)">
             <summary>
            使用提供的参数，执行有结果集返回的数据库操作命令
             并返回SqlDataReader对象
             </summary>
             <param name="dbFactory">数据库配置对象</param>
             <param name="trans"></param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回SqlDataReader对象</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteReader(Easy4net.DBUtility.DbFactory,System.Boolean,System.Data.IDbConnection,System.Data.CommandType,System.String)">
             <summary>
            使用提供的参数，执行有结果集返回的数据库操作命令
             并返回SqlDataReader对象
             </summary>
             <param name="dbFactory">数据库配置对象</param>
             <param name="closeConnection">读取完关闭Reader是否同时也关闭数据库连接</param>
             <param name="connection">数据库链接</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回SqlDataReader对象</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.dataSet(Easy4net.DBUtility.DbFactory,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            查询数据填充到数据集DataSet中
            </summary>
            <param name="dbFactory">数据库配置对象</param>
            <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
            <param name="cmdText">命令文本</param>
            <param name="commandParameters">参数数组</param>
            <returns>数据集DataSet对象</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.dataSet(Easy4net.DBUtility.DbFactory,System.Data.CommandType,System.String)">
            <summary>
            查询数据填充到数据集DataSet中
            </summary>
            <param name="dbFactory">数据库配置对象</param>
            <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
            <param name="cmdText">命令文本</param>
            <returns>数据集DataSet对象</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteScalar(Easy4net.DBUtility.DbFactory,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            依靠数据库连接字符串connectionString,
            使用所提供参数，执行返回首行首列命令
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="dbFactory">数据库配置对象</param>
            <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
            <param name="cmdText">存储过程名称或者T-SQL命令行</param>
            <param name="commandParameters">执行命令所需的参数数组</param>
            <returns>返回一个对象，使用Convert.To{Type}将该对象转换成想要的数据类型。</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteScalar(Easy4net.DBUtility.DbFactory,System.Data.CommandType,System.String)">
            <summary>
            依靠数据库连接字符串connectionString,
            使用所提供参数，执行返回首行首列命令
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="dbFactory">数据库配置对象</param>
            <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
            <param name="cmdText">存储过程名称或者T-SQL命令行</param>
            <returns>返回一个对象，使用Convert.To{Type}将该对象转换成想要的数据类型。</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteScalar(Easy4net.DBUtility.DbFactory,System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
             <summary>
            依靠数据库连接字符串connectionString,
             使用所提供参数，执行返回首行首列命令
             </summary>
             <remarks>
             e.g.:  
              Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="connection">数据库连接对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <param name="commandParameters">执行命令所需的参数数组</param>
             <returns>返回一个对象，使用Convert.To{Type}将该对象转换成想要的数据类型。</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteScalar(Easy4net.DBUtility.DbFactory,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
             <summary>
            依靠数据库连接字符串connectionString,
             使用所提供参数，执行返回首行首列命令
             </summary>
             <remarks>
             e.g.:  
              Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="connection">数据库连接对象</param>
             <param name="transaction"></param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <param name="commandParameters">执行命令所需的参数数组</param>
             <returns>返回一个对象，使用Convert.To{Type}将该对象转换成想要的数据类型。</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteScalar(Easy4net.DBUtility.DbFactory,System.Data.IDbConnection,System.Data.CommandType,System.String)">
             <summary>
            依靠数据库连接字符串connectionString,
             使用所提供参数，执行返回首行首列命令
             </summary>
             <remarks>
             e.g.:  
              Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="connection">数据库连接对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回一个对象，使用Convert.To{Type}将该对象转换成想要的数据类型。</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteScalar(Easy4net.DBUtility.DbFactory,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String)">
             <summary>
            依靠数据库连接字符串connectionString,
             使用所提供参数，执行返回首行首列命令
             </summary>
             <remarks>
             e.g.:  
              Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="conn">数据库连接对象</param>
             <param name="trans"></param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <returns>返回一个对象，使用Convert.To{Type}将该对象转换成想要的数据类型。</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.ExecuteScalar(Easy4net.DBUtility.DbFactory,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
             <summary>
            依靠数据库连接字符串connectionString,
             使用所提供参数，执行返回首行首列命令
             </summary>
             <remarks>
             e.g.:  
              Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
             </remarks>
             <param name="dbFactory">数据库配置对象</param>
             <param name="trans">数据库事物对象</param>
             <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
             <param name="cmdText">存储过程名称或者T-SQL命令行</param>
             <param name="commandParameters">执行命令所需的参数数组</param>
             <returns>返回一个对象，使用Convert.To{Type}将该对象转换成想要的数据类型。</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.CacheParameters(System.String,System.Data.IDbDataParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="commandParameters">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.GetCachedParameters(System.String)">
            <summary>
            查询缓存参数
            </summary>
            <param name="cacheKey">使用缓存名称查找值</param>
            <returns>缓存参数数组</returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.PrepareCommand(Easy4net.DBUtility.DbFactory,System.Data.IDbCommand,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            为即将执行准备一个命令
            </summary>
            <param name="dbFactory">数据库配置对象</param>
            <param name="cmd">SqlCommand对象</param>
            <param name="conn">SqlConnection对象</param>
            <param name="trans">IDbTransaction对象</param>
            <param name="cmdType">执行命令的类型（存储过程或T-SQL，等等）</param>
            <param name="cmdText">存储过程名称或者T-SQL命令行, e.g. Select * from Products</param>
            <param name="cmdParms">SqlParameters to use in the command</param>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.GetConnectionString(System.String)">
            <summary>
            根据传入的Key获取配置文件中
            相应Key的数据库连接字符串
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.AdoHelper.DatabaseTypeEnumParse``1(System.String)">
            <summary>
            用于数据库类型的字符串枚举转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.DBUtility.DatabaseType">
            <summary>
            数据库类型枚举，需要扩展类型可在此添加
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DatabaseType.SQLSERVER">
            <summary>
            MSSQL数据库
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DatabaseType.ORACLE">
            <summary>
            ORACLE数据库
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DatabaseType.ACCESS">
            <summary>
            ACCESS数据库
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DatabaseType.MYSQL">
            <summary>
            MYSQL数据库
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DatabaseType.SQLITE">
            <summary>
            SQLITE数据库
            </summary>
        </member>
        <member name="T:Easy4net.DBUtility.DbFactory">
            <summary>
            数据生成工厂类
            </summary>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.NewInstance(System.String,Easy4net.DBUtility.DatabaseType)">
            <summary>
            根据数据库连接字符串以及数据库类型创建一个数据库工厂对象
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="P:Easy4net.DBUtility.DbFactory.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Easy4net.DBUtility.DbFactory.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Easy4net.DBUtility.DbFactory.DbParmChar">
            <summary>
            参数的前缀字符
            </summary>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbParmCharacter">
            <summary>
            根据配置文件中所配置的数据库类型
            来获取命令参数中的参数符号oracle为":",sqlserver为"@"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbConnection">
            <summary>
            根据配置文件中所配置的数据库类型和传入的
            数据库链接字符串来创建相应数据库连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbCommand">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库命令对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDataAdapter">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库适配器对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            根据配置文件中所配置的数据库类型
            和传入的命令对象来创建相应数据库适配器对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbParameter">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库的参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbParameter(System.String,System.Object)">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库的参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库的参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库的参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbParameter(System.String,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库的参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbOutParameter(System.String,System.Int32)">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库的参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbParameter(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库的参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbParameters(System.Int32)">
            <summary>
            根据配置文件中所配置的数据库类型
            和传入的参数来创建相应数据库的参数数组对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbTransaction">
            <summary>
            根据配置文件中所配置的数据库类型
            来创建相应数据库的事物对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DbFactory.CreateDbTransaction(System.Data.IsolationLevel)">
            <summary>
            创建数据库的事物对象
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.DBUtility.DBHelper">
            <summary>
            数据库帮助类
            </summary>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.#ctor(System.String)">
            <summary>
            根据数据库连接类型名创建一个数据库帮助类
            </summary>
            <param name="connName"></param>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.getInstance(System.String)">
            <summary>
            根据数据库连接类型名创建一个数据库帮助类
            </summary>
            <param name="connName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Get``1(System.Object)">
            <summary>
            根据主键ID获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Save``1(``0)">
            <summary>
            插入对象数据
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="entity">需要插入的数据对象</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Save``1(System.Collections.Generic.List{``0})">
            <summary>
            批量插入对象数据
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="entityList">需要插入的数据对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Update``1(``0)">
            <summary>
            更新对象数据
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="entity">需要更新的数据对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Update``1(System.Collections.Generic.List{``0})">
            <summary>
            批量更新对象数据
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="entityList">需要更新的数据对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Remove``1(``0)">
            <summary>
            删除对象数据
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="entity">需要删除的数据对象</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Remove``1(System.Collections.Generic.List{``0})">
            <summary>
            批量删除对象数据
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="entityList">需要删除的数据对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Remove``1(System.Object)">
            <summary>
            根据主键ID删除数据
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Remove``1(System.Object[])">
            <summary>
            批量根据主键ID删除数据
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.ExcuteSQL(System.String,Easy4net.Common.ParamMap)">
            <summary>
            执行SQL语句
            </summary>
            <param name="strSQL">SQL命令</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.ExcuteSQL(System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="strSQL">SQL命令</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.ExcuteStoredProcReturnString(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行带参数的存储过程返回字符串
            </summary>
            <param name="strSQL">SQL命令</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.ExcuteStoredProc(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行带参数的存储过程返回记录集
            </summary>
            <param name="strSQL">SQL命令</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.ExcuteSQLReturnDataSet(System.String)">
            <summary>
            执行SQL返回记录集
            </summary>
            <param name="strSQL">SQL命令</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Count(System.String)">
            <summary>
            根据SQL查询数量
            </summary>
            <param name="strSQL">SQL命令</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.Count(System.String,Easy4net.Common.ParamMap)">
            <summary>
            根据SQL查询记录数
            </summary>
            <param name="strSQL">SQL命令</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.FindBySql``1(System.String)">
            <summary>
            根据SQL查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="strSQL">SQL命令</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.FindBySql``1(System.String,Easy4net.Common.ParamMap)">
            <summary>
            根据SQL查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="strSQL">SQL命令</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.FindPage``1(System.String,Easy4net.Common.ParamMap)">
            <summary>
            分页查询返回分页对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="strSQL">SQL命令</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.FindOne``1(System.String)">
            <summary>
            查询一条数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="strSQL">SQL命令</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.FindOne``1(System.String,Easy4net.Common.ParamMap)">
            <summary>
            查询一条数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="strSQL">SQL命令</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.BeginTransaction">
            <summary>
            开启事务
            </summary>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            根据锁定行为开启事物
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.CommitTransaction">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Easy4net.DBUtility.DBHelper.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="T:Easy4net.DBUtility.DbOperateType">
            <summary>
            数据库表操作类型定义
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DbOperateType.INSERT">
            <summary>
            插入操作
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DbOperateType.UPDATE">
            <summary>
            更新操作
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DbOperateType.DELETE">
            <summary>
            删除操作
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DbOperateType.SELECT">
            <summary>
            查询操作
            </summary>
        </member>
        <member name="F:Easy4net.DBUtility.DbOperateType.COUNT">
            <summary>
            获取记录数操作
            </summary>
        </member>
        <member name="T:Easy4net.DBUtility.DbTypeConvert">
            <summary>
            数据类型转换帮助类
            </summary>
        </member>
        <member name="M:Easy4net.DBUtility.DbTypeConvert.ToDecimal(System.Int32)">
            <summary>
            转为Decimal类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Utility.ConfigHelper">
            <summary>
            web.config操作类
            Copyright (C) xcmg
            </summary>
        </member>
        <member name="M:Easy4net.Utility.ConfigHelper.GetConfigString(System.String)">
            <summary>
            得到AppSettings中的配置字符串信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.ConfigHelper.GetConfigBool(System.String)">
            <summary>
            得到AppSettings中的配置Bool信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.ConfigHelper.GetConfigDecimal(System.String)">
            <summary>
            得到AppSettings中的配置Decimal信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.ConfigHelper.GetConfigInt(System.String)">
            <summary>
            得到AppSettings中的配置int信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.ConfigHelper.GetAppSettingString(System.String)">
            <summary>
            得到web.config里配置
            </summary>
            <param name="configName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.ConvertHelper.hexStrToByte(System.String)">
            <summary> 
            16进制字符串转字节数组 
            </summary> 
            <param name="hexString"></param> 
            <returns></returns> 
        </member>
        <member name="M:Easy4net.Utility.ConvertHelper.byteToHexStr(System.Byte[])">
            <summary> 
            字节数组转16进制字符串 
            </summary> 
            <param name="bytes"></param> 
            <returns></returns> 
        </member>
        <member name="M:Easy4net.Utility.ConvertHelper.ToHex(System.String,System.String,System.Boolean)">
            <summary> 
            从汉字转换到16进制字符串 
            </summary> 
            <param name="s"></param> 
            <param name="charset">编码,如"utf-8","gb2312"</param> 
            <param name="fenge">是否每字符用逗号分隔</param> 
            <returns></returns> 
        </member>
        <member name="M:Easy4net.Utility.ConvertHelper.UnHex(System.String,System.String)">
            <summary> 
             从16进制字符串转换成汉字 
             </summary> 
             <param name="hex"></param> 
             <param name="charset">编码,如"utf-8","gb2312"</param> 
             <returns></returns> 
        </member>
        <member name="T:Easy4net.Utility.DataCache">
            <summary>
            缓存操作类
            </summary>
        </member>
        <member name="M:Easy4net.Utility.DataCache.GetCache(System.String)">
            <summary>
            获取当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.DataCache.SetCache(System.String,System.Object)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="M:Easy4net.Utility.DataCache.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="M:Easy4net.Utility.DataCache.RemoveCache(System.String)">
            <summary>
            从缓存中移出某键的缓存值
            </summary>
            <param name="CacheKey">缓存的键</param>
        </member>
        <member name="T:Easy4net.Utility.DataReturnType">
            <summary>
            决定函数返回的是什么类型的数据
            </summary>
        </member>
        <member name="M:Easy4net.Utility.Encrypt.GenerateSalt">
            <summary>
            随机产生Salt
            </summary>
        </member>
        <member name="T:Easy4net.Utility.HardwareInfo">
            <summary>
            硬件信息类
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HardwareInfo.HostName">
            <summary>
            机器名
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HardwareInfo.CPUID">
            <summary>
            CPU编号
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HardwareInfo.HardDiskID">
            <summary>
            硬盘编号
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HardwareInfo.NetMac">
            <summary>
            网卡MAC
            </summary>
        </member>
        <member name="M:Easy4net.Utility.HardwareInfo.GetCpuID">
            <summary>
            获得CPU编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.HardwareInfo.GetHardDiskID">
            <summary>
            获得硬盘编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.HardwareInfo.GetMac">
            <summary>
            获得网卡MAC
            </summary>
            <returns></returns>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.KeepContext">
            <summary>
            是否自动在不同的请求间保留Cookie, Referer
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.DefaultLanguage">
            <summary>
            期望的回应的语言
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.DefaultEncoding">
            <summary>
            GetString()如果不能从HTTP头或Meta标签中获取编码信息,则使用此编码来获取字符串
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.Verb">
            <summary>
            指示发出Get请求还是Post请求
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.Files">
            <summary>
            要上传的文件.如果不为空则自动转为Post请求
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.PostingData">
            <summary>
            要发送的Form表单信息
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.Url">
            <summary>
            获取或设置请求资源的地址
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.ResponseHeaders">
            <summary>
            用于在获取回应后,暂时记录回应的HTTP头
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.Accept">
            <summary>
            获取或设置期望的资源类型
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.UserAgent">
            <summary>
            获取或设置请求中的Http头User-Agent的值
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.Context">
            <summary>
            获取或设置Cookie及Referer
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.StartPoint">
            <summary>
            获取或设置获取内容的起始点,用于断点续传,多线程下载等
            </summary>
        </member>
        <member name="P:Easy4net.Utility.HttpClient.EndPoint">
            <summary>
            获取或设置获取内容的结束点,用于断点续传,多下程下载等.
            如果为0,表示获取资源从StartPoint开始的剩余内容
            </summary>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.#ctor">
            <summary>
            构造新的HttpClient实例
            </summary>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.#ctor(System.String)">
            <summary>
            构造新的HttpClient实例
            </summary>
            <param name="url">要获取的资源的地址</param>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.#ctor(System.String,Easy4net.Utility.HttpClientContext)">
            <summary>
            构造新的HttpClient实例
            </summary>
            <param name="url">要获取的资源的地址</param>
            <param name="context">Cookie及Referer</param>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.#ctor(System.String,Easy4net.Utility.HttpClientContext,System.Boolean)">
            <summary>
            构造新的HttpClient实例
            </summary>
            <param name="url">要获取的资源的地址</param>
            <param name="context">Cookie及Referer</param>
            <param name="keepContext">是否自动在不同的请求间保留Cookie, Referer</param>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.AttachFile(System.String,System.String)">
            <summary>
            在请求中添加要上传的文件
            </summary>
            <param name="fileName">要上传的文件路径</param>
            <param name="fieldName">文件字段的名称(相当于&lt;input type=file name=fieldName&gt;)里的fieldName)</param>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.AttachFile(System.Byte[],System.String,System.String)">
            <summary>
            在请求中添加要上传的文件
            </summary>
            <param name="data">要上传的文件内容</param>
            <param name="fileName">文件名</param>
            <param name="fieldName">文件字段的名称(相当于&lt;input type=file name=fieldName&gt;)里的fieldName)</param>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.Reset">
            <summary>
            清空PostingData, Files, StartPoint, EndPoint, ResponseHeaders, 并把Verb设置为Get.
            在发出一个包含上述信息的请求后,必须调用此方法或手工设置相应属性以使下一次请求不会受到影响.
            </summary>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.GetResponse">
            <summary>
            发出一次新的请求,并返回获得的回应
            调用此方法永远不会触发StatusUpdate事件.
            </summary>
            <returns>相应的HttpWebResponse</returns>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.GetResponse(System.String)">
            <summary>
            发出一次新的请求,并返回获得的回应
            调用此方法永远不会触发StatusUpdate事件.
            </summary>
            <returns>相应的HttpWebResponse</returns>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.GetStream">
            <summary>
            发出一次新的请求,并返回回应内容的流
            调用此方法永远不会触发StatusUpdate事件.
            </summary>
            <returns>包含回应主体内容的流</returns>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.GetBytes">
            <summary>
            发出一次新的请求,并以字节数组形式返回回应的内容
            调用此方法会触发StatusUpdate事件
            </summary>
            <returns>包含回应主体内容的字节数组</returns>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.GetString">
            <summary>
            发出一次新的请求,以Http头,或Html Meta标签,或DefaultEncoding指示的编码信息对回应主体解码
            调用此方法会触发StatusUpdate事件
            </summary>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.GetString(System.Text.Encoding)">
            <summary>
            发出一次新的请求,对回应的主体内容以指定的编码进行解码
            调用此方法会触发StatusUpdate事件
            </summary>
            <param name="encoding">指定的编码</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.HeadContentLength">
            <summary>
            发出一次新的Head请求,获取资源的长度
            此请求会忽略PostingData, Files, StartPoint, EndPoint, Verb
            </summary>
            <returns>返回的资源长度</returns>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.SaveAsFile(System.String)">
            <summary>
            发出一次新的请求,把回应的主体内容保存到文件
            调用此方法会触发StatusUpdate事件
            如果指定的文件存在,它会被覆盖
            </summary>
            <param name="fileName">要保存的文件路径</param>
        </member>
        <member name="M:Easy4net.Utility.HttpClient.SaveAsFile(System.String,Easy4net.Utility.FileExistsAction)">
            <summary>
            发出一次新的请求,把回应的主体内容保存到文件
            调用此方法会触发StatusUpdate事件
            </summary>
            <param name="fileName">要保存的文件路径</param>
            <param name="existsAction">指定的文件存在时的选项</param>
            <returns>是否向目标文件写入了数据</returns>
        </member>
        <member name="P:Easy4net.Utility.StatusUpdateEventArgs.BytesGot">
            <summary>
            已经下载的字节数
            </summary>
        </member>
        <member name="P:Easy4net.Utility.StatusUpdateEventArgs.BytesTotal">
            <summary>
            资源的总字节数
            </summary>
        </member>
        <member name="M:Easy4net.Utility.IListDataSet.ToDataSet(System.Collections.IList)">
            <summary> 
            集合装换DataSet 
            </summary> 
            <param name="list">集合</param>
            <returns></returns>   
            2014-8-1 22:08 HPDV2806 
        </member>
        <member name="M:Easy4net.Utility.IListDataSet.ToDataSet``1(System.Collections.Generic.IList{``0})">
            <summary>
            泛型集合转换DataSet
            </summary>   
            <typeparam name="T"></typeparam>  
            <param name="list">泛型集合</param>  
            <returns></returns>   
            2008-8-1 22:43 HPDV2806 
        </member>
        <member name="M:Easy4net.Utility.IListDataSet.ToDataSet``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary> 
            泛型集合转换DataSet 
            </summary> 
            <typeparam name="T"></typeparam>
            <param name="p_List">泛型集合</param>
            <param name="p_PropertyName">待转换属性名数组</param>     
            <returns></returns>      
            2008-8-1 22:44 HPDV2806    
        </member>
        <member name="M:Easy4net.Utility.IListDataSet.DataSetToIList``1(System.Data.DataSet,System.Int32)">
            <summary>
            DataSet装换为泛型集合     
            </summary>     
            <typeparam name="T"></typeparam>    
            <param name="p_DataSet">DataSet</param>    
            <param name="p_TableIndex">待转换数据表索引</param>    
            <returns></returns>     
            2008-8-1 22:46 HPDV2806   
        </member>
        <member name="M:Easy4net.Utility.IListDataSet.DataSetToIList``1(System.Data.DataSet,System.String)">
            <summary> 
            DataSet装换为泛型集合 
            </summary> 
            <typeparam name="T"></typeparam>
            <param name="p_DataSet">DataSet</param>     
            <param name="p_TableName">待转换数据表名称</param>     
            <returns></returns>      
            2008-8-1 22:47 HPDV2806    
        </member>
        <member name="M:Easy4net.Utility.LogHelper.DebugFormat(System.Type,System.String,System.Object[])">
            <summary>
            记录DEBUG信息
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Easy4net.Utility.LogHelper.InfoFormat(System.Type,System.String,System.Object[])">
            <summary>
            记录INFO信息
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Easy4net.Utility.LogHelper.ErrorFormat(System.Type,System.String,System.Object[])">
            <summary>
            记录ERRO信息
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Easy4net.Utility.LogHelper.FatalFormat(System.Type,System.String,System.Object[])">
            <summary>
            记录Fatal信息
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Easy4net.Utility.RandStr.#ctor">
            <summary>
            如未提供参数构造,则默认由数字+小写字母构成
            </summary>
        </member>
        <member name="M:Easy4net.Utility.RandStr.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造函数,可指定构成的字符
            </summary>
            <param name="useNum">是否使用数字</param>
            <param name="useUpper">是否使用大写字母</param>
            <param name="useLower">是否使用小写字母</param>
            <param name="useMark">是否使用符号</param>
        </member>
        <member name="M:Easy4net.Utility.RandStr.#ctor(System.String)">
            <summary>
            使用自定义的组成字符构造
            </summary>
            <param name="userStr">自定义字符</param>
        </member>
        <member name="M:Easy4net.Utility.RandStr.GetRandStr(System.Int32)">
            <summary>
            取得一个随机字符串
            </summary>
            <param name="length">取得随机字符串的长度</param>
            <returns>返回的随机字符串</returns>
        </member>
        <member name="M:Easy4net.Utility.StringExtension.ToDateTime2(System.String)">
            <summary>
            这种格式的日期时间字符串转换成日期时间：20090624101315
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.StringExtension.LeftString(System.String,System.Int32)">
            <summary>
            截字符串
            </summary>
        </member>
        <member name="M:Easy4net.Utility.StringExtension.LeftStringASIIC(System.String,System.Int32)">
            <summary>
            截字符串
            </summary>
        </member>
        <member name="M:Easy4net.Utility.StringExtension.LeftString(System.String,System.Int32,System.String)">
            <summary>
            截取字符串
            </summary>
            <param name="str">需要被截取的字符串</param>
            <param name="length">需要在多少长度后截取</param>
            <param name="ellipsis">需要在字符串后添加的字符</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.StringExtension.LeftStringASIIC(System.String,System.Int32,System.String)">
            <summary>
            截字符串
            </summary>
        </member>
        <member name="M:Easy4net.Utility.StringExtension.GenerateNumberString(System.Int32,System.Int32)">
            <summary>
            输出固定位数的数字字符串，如果不到位数用0补足。如000123
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Easy4net.Utility.StringExtension.FinalHandle(System.String)" -->
        <member name="M:Easy4net.Utility.StringExtension.ToInteger(System.String)">
            <summary>
            转换为整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetIPAddress">
            <summary>
            获取远程浏览器端 IP 地址
            </summary>
            <returns>返回 IPv4 地址</returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetBrowse">
            <summary>
            得到用户浏览器类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetOSName">
            <summary>
            获取浏览器端操作系统名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetPagerHtml(System.Int64,System.Int32,System.Int32,System.String)">
            <summary>
            得到分页HTML
            </summary>
            <param name="recordCount">记录总数</param>
            <param name="pageSize">每页条数</param>
            <param name="pageNumber">当前页</param>
            <param name="queryString">查询字符串</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetPageSize">
            <summary>
            得到页尺寸
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetPageNumber">
            <summary>
            得到页号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetListItems(System.Collections.Generic.IList{System.String[]},System.String,System.Boolean,System.String)">
            <summary>
            得到列表项
            </summary>
            <param name="list">列表, 标题,值</param>
            <param name="value">默认值</param>
            <param name="showEmpty">是不显示空选项</param>
            <param name="emptyTitle">空选项显示标题</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetOptionsString(System.Web.UI.WebControls.ListItem[])">
            <summary>
            将服务器控件列表项转换为select列表项
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetCheckBoxString(System.Web.UI.WebControls.ListItem[],System.String,System.String[],System.String)">
            <summary>
            将服务器控件列表项转换为Checkbox项
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetRadioString(System.Web.UI.WebControls.ListItem[],System.String,System.String)">
            <summary>
            将服务器控件列表项转换为Radio项
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetYesNoListItems(System.String,System.Boolean,System.String)">
            <summary>
            得到是否选择项
            </summary>
            <param name="value"></param>
            <param name="showEmpty"></param>
            <param name="emptyString"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetSqlInString(System.String,System.Boolean,System.String)">
            <summary>
            得到sql语句in里的字符串
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetSqlInString``1(``0[],System.Boolean)">
            <summary>
            得到sql语句in里的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strArray"></param>
            <param name="isSingleQuotes">是否加单引号，字符串要加，数字不加</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetRandomNum(System.Int32,System.Int32,System.Int32)">
            <summary>
            产生不重复随机数
            </summary>
            <param name="count">共产生多少随机数</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>int[]数组</returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.GetRandomString(System.Int32)">
            <summary>
            产生随机字符串
            </summary>
            <returns>字符串位数</returns> 
        </member>
        <member name="M:Easy4net.Utility.Tools.GetRandomLetter(System.Int32)">
            <summary>
            产生随机字母
            </summary>
            <returns>字符串位数</returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.getMD5(System.String)">
            <summary>
            获取md5码
            </summary>
            <param name="source">待转换字符串</param>
            <returns>md5加密后的字符串</returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.getRandomUserName">
            <summary>
            随机生成用户列表不存在的用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.getMac(System.String)">
            <summary>
            获取客户端mac
            </summary>
            <param name="clientip"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.getURL">
            <summary>
            获取当前网站主机的url路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.getFileURL(System.String)">
            <summary>
            获取系统设定的文件路径前缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.EnumToDic(System.Enum)">
            <summary>
            枚举类型转字典类型
            </summary>
            <param name="em"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Utility.Tools.Base64Code(System.String)">
            <summary>  
            Base64加密  
            </summary>  
            <param name="Message"></param>  
            <returns></returns>  
        </member>
        <member name="M:Easy4net.Utility.Tools.Base64Decode(System.String)">
            <summary>  
            Base64解密  
            </summary>  
            <param name="Message"></param>  
            <returns></returns>  
        </member>
        <member name="M:Easy4net.Utility.Tools.Ping(System.String)">
            <summary>  
            是否能 Ping 通指定的主机  
            </summary>  
            <param name="ip">ip 地址或主机名或域名</param>  
            <returns>true 通，false 不通</returns>  
        </member>
        <member name="T:Easy4net.Variety.MSSQL.OrmMSSQLConfig">
            <summary>
            MSSQL数据库配置类
            </summary>
        </member>
        <member name="F:Easy4net.Variety.MSSQL.OrmMSSQLConfig._keyMSSQL">
            <summary>
            MSSQL关键字集合
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.OrmMSSQLConfig.DbType">
            <summary>
            获取当前支持的数据库类型
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.OrmMSSQLConfig.DbParamChar">
            <summary>
            获取对应的数据库参数字符前缀
            </summary>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.#ctor(System.String)">
            <summary>
            创建一个数据库参数对象
            </summary>
            <param name="aConn"></param>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.#ctor(Easy4net.Variety.MSSQL.SqlConnectionParam)">
            <summary>
            根据MSSQL数据库参数获取一个MSSQL的数据库参数对象
            </summary>
            <param name="aPrm"></param>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.#ctor">
            <summary>
            根据当前的全局配置获取一个MSSQL的数据库参数对象
            </summary>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.CreateDbConnection">
            <summary>
            创建一个数据库链接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.CreateDbCommand">
            <summary>
            创建一个数据库命令对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.CreateDataAdapter">
            <summary>
            创建数据库适配器对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            根据传入的命令对象创建适配器对象
            </summary>
            <param name="aCmd"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.CreateDbParameter">
            <summary>
            创建数据库参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.FormatColumnName(System.String)">
            <summary>
            检查MSSQL列名是否为数据库的关键字，是则进行格式化，否则返回原列名
            </summary>
            <param name="aColounName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.OrmMSSQLConfig.GetAutoSql">
            <summary>
            生成获取自增长列的新添加值的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Variety.MSSQL.SqlConnectionParam">
            <summary>
            SQL数据库连接参数配置类
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.DbHost">
            <summary>
            数据库主机地址
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.DbPort">
            <summary>
            数据库端口
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.DbName">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.DbUser">
            <summary>
            数据库用户名
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.DbPassword">
            <summary>
            数据库密码
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.DbMinPoolSize">
            <summary>
            最小缓存池大小，空则未配置
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.DbMaxPoolSize">
            <summary>
            最大缓存池大小，空则未配置
            </summary>
        </member>
        <member name="P:Easy4net.Variety.MSSQL.SqlConnectionParam.DbCharset">
            <summary>
            字符集设置，空则未配置
            </summary>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.SqlConnectionParam.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新建一个MSSQL链接参数对象
            </summary>
            <param name="aHost">数据库主机地址</param>
            <param name="aPort">端口号</param>
            <param name="aName">数据库名</param>
            <param name="aUser">用户名</param>
            <param name="aPassword">密码</param>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.SqlConnectionParam.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新建一个MSSQL链接参数对象
            </summary>
            <param name="aHost">数据库主机地址</param>
            <param name="aPort">端口号</param>
            <param name="aName">数据库名</param>
            <param name="aUser">用户名</param>
            <param name="aPassword">密码</param>
            <param name="aCharset">字符集</param>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.SqlConnectionParam.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新建一个MSSQL链接参数对象
            </summary>
            <param name="aHost">数据库主机地址</param>
            <param name="aPort">端口号</param>
            <param name="aName">数据库名</param>
            <param name="aUser">用户名</param>
            <param name="aPassword">密码</param>
            <param name="aMinPool">最小缓存池大小</param>
            <param name="aMaxPool">最大缓存池大小</param>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.SqlConnectionParam.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新建一个MSSQL链接参数对象
            </summary>
            <param name="aHost">数据库主机地址</param>
            <param name="aPort">端口号</param>
            <param name="aName">数据库名</param>
            <param name="aUser">用户名</param>
            <param name="aPassword">密码</param>
            <param name="aMinPool">最小缓存池大小</param>
            <param name="aMaxPool">最大缓存池大小</param>
            <param name="aCharset">字符集</param>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.SqlConnectionParam.SetGlobal">
            <summary>
            将当前参数设置为全局连接参数
            </summary>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.SqlConnectionParam.ToString">
            <summary>
            输出当前连接参数字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.MSSQL.SqlConnectionParam.GetConnectionString(Easy4net.Variety.MSSQL.SqlConnectionParam)">
            <summary>
            根据当前的变量生成链接字符串
            </summary>
            <param name="aParam">数据库连接参数</param>
            <returns>连接字符串</returns>
        </member>
        <member name="T:Easy4net.Variety.OrmConfig">
            <summary>
            ORM配置基类
            </summary>
        </member>
        <member name="P:Easy4net.Variety.OrmConfig.DbType">
            <summary>
            获取当前支持的数据库类型
            </summary>
        </member>
        <member name="P:Easy4net.Variety.OrmConfig.DbParamChar">
            <summary>
            获取对应的数据库参数字符前缀
            </summary>
        </member>
        <member name="P:Easy4net.Variety.OrmConfig.ConnectionString">
            <summary>
            获取数据库连接字符串
            </summary>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbConnection">
            <summary>
            创建一个数据库链接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbCommand">
            <summary>
            创建一个数据库命令对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDataAdapter">
            <summary>
            创建数据库适配器对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            根据传入的命令对象创建适配器对象
            </summary>
            <param name="aCmd"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbTransaction">
            <summary>
            打开数据库连接并创建事物对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbTransaction(System.Data.IsolationLevel)">
            <summary>
            打开数据库连接并创建指定连接行为的事物对象
            </summary>
            <param name="aLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbParameter">
            <summary>
            创建数据库参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbParameter(System.String,System.Object)">
            <summary>
            根据参数名与值创建数据库参数对象
            </summary>
            <param name="aPrmName"></param>
            <param name="aValue"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            根据参数名与值及参数值类型创建一个数据库参数对象
            </summary>
            <param name="aPrmName"></param>
            <param name="aValue"></param>
            <param name="aDbType">参数值的数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            根据参数名与值及参数输入输出类型创建一个数据库参数对象
            </summary>
            <param name="aPrmName"></param>
            <param name="aValue"></param>
            <param name="aDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.CreateDbParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            根据参数名，值，参数大小，参数方向类型创建一个参数对象
            </summary>
            <param name="aPrmName"></param>
            <param name="aValue"></param>
            <param name="aDbType"></param>
            <param name="aSize"></param>
            <param name="aDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.FormatColumnName(System.String)">
            <summary>
            格式化字段名
            </summary>
            <param name="aColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.OrmConfig.GetAutoSql">
            <summary>
            生成获取自增长列的新添加值的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Variety.SQLite.OrmSQLiteConfig">
            <summary>
            SQLite数据库配置类
            </summary>
        </member>
        <member name="F:Easy4net.Variety.SQLite.OrmSQLiteConfig._keySQLite">
            <summary>
            SQLite关键字集合
            </summary>
        </member>
        <member name="P:Easy4net.Variety.SQLite.OrmSQLiteConfig.DbType">
            <summary>
            获取当前支持的数据库类型
            </summary>
        </member>
        <member name="P:Easy4net.Variety.SQLite.OrmSQLiteConfig.DbParamChar">
            <summary>
            获取对应的数据库参数字符前缀
            </summary>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.#ctor(System.String)">
            <summary>
            创建一个数据库参数对象
            </summary>
            <param name="aConn"></param>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.#ctor(Easy4net.Variety.SQLite.SQLiteConnectionParam)">
            <summary>
            根据SQLite数据库参数获取一个MSSQL的数据库参数对象
            </summary>
            <param name="aPrm"></param>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.#ctor">
            <summary>
            根据当前的全局配置获取一个SQLite的数据库参数对象
            </summary>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.CreateDbConnection">
            <summary>
            创建一个数据库链接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.CreateDbCommand">
            <summary>
            创建一个数据库命令对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.CreateDataAdapter">
            <summary>
            创建数据库适配器对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            根据传入的命令对象创建适配器对象
            </summary>
            <param name="aCmd"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.CreateDbParameter">
            <summary>
            创建数据库参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.CreateDbParameter(System.String,System.Object)">
            <summary>
            根据参数名与值创建数据库参数对象
            </summary>
            <param name="aPrmName"></param>
            <param name="aValue"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.FormatColumnName(System.String)">
            <summary>
            检查SQLite列名是否为数据库的关键字，是则进行格式化，否则返回原列名
            </summary>
            <param name="aColounName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.SQLite.OrmSQLiteConfig.GetAutoSql">
            <summary>
            生成获取自增长列的新添加值的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Variety.SQLite.SQLiteConnectionParam">
            <summary>
            SQLite数据库连接参数
            </summary>
        </member>
        <member name="P:Easy4net.Variety.SQLite.SQLiteConnectionParam.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Easy4net.Variety.SQLite.SQLiteConnectionParam.FileName">
            <summary>
            SQLite数据库路径
            </summary>
        </member>
        <member name="P:Easy4net.Variety.SQLite.SQLiteConnectionParam.Password">
            <summary>
            SQLite数据库密码
            </summary>
        </member>
        <member name="M:Easy4net.Variety.SQLite.SQLiteConnectionParam.#ctor(System.String)">
            <summary>
            创建一个无密码的SQLite数据库参数
            </summary>
            <param name="aFile">数据库文件路径</param>
        </member>
        <member name="M:Easy4net.Variety.SQLite.SQLiteConnectionParam.#ctor(System.String,System.String)">
            <summary>
            创建一个带密码的SQLite数据库参数
            </summary>
            <param name="aFile"></param>
            <param name="aPwd"></param>
        </member>
        <member name="M:Easy4net.Variety.SQLite.SQLiteConnectionParam.SetGlobal">
            <summary>
            将当前参数设置为全局连接参数
            </summary>
        </member>
        <member name="M:Easy4net.Variety.SQLite.SQLiteConnectionParam.ToString">
            <summary>
            输出当前连接参数字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Variety.SQLite.SQLiteConnectionParam.GetConnectionString(Easy4net.Variety.SQLite.SQLiteConnectionParam)">
            <summary>
            根据当前的变量生成链接字符串
            </summary>
            <param name="aParam">数据库连接参数</param>
            <returns>连接字符串</returns>
        </member>
        <member name="T:Easy4net.Context.Session">
            <summary>
            持久层实体类
            </summary>
        </member>
        <member name="F:Easy4net.Context.Session.sqliteHelper">
            <summary>
            SQLite数据库帮助对象
            </summary>
        </member>
        <member name="F:Easy4net.Context.Session.connectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="F:Easy4net.Context.Session.provider">
            <summary>
            支持数据库字符串
            </summary>
        </member>
        <member name="F:Easy4net.Context.Session.m_Transaction">
            <summary>
            数据库事物对象
            </summary>
        </member>
        <member name="F:Easy4net.Context.Session.dataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Easy4net.Context.Session.dbFactory">
            <summary>
            数据库工厂对象,生成相应的数据库操作对象
            </summary>
        </member>
        <member name="P:Easy4net.Context.Session.DbFactory">
            <summary>
            /数据库工厂对象,生成相应的数据库操作对象
            </summary>
        </member>
        <member name="M:Easy4net.Context.Session.NewInstance(System.String)">
            <summary>
            根据数据库类型名创建一个持久层对象
            </summary>
            <param name="connName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.GetCurrentSession">
            <summary>
            获取当前的持久层对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.ConnectDB(System.String)">
            <summary>
            根据连接类型名进行连接配置
            </summary>
            <param name="connName"></param>
        </member>
        <member name="M:Easy4net.Context.Session.BeginTransaction">
            <summary>
            开启事物处理功能
            </summary>
        </member>
        <member name="M:Easy4net.Context.Session.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            根据事物锁定行为开启事物
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Easy4net.Context.Session.Commit">
            <summary>
            提交事物
            </summary>
        </member>
        <member name="M:Easy4net.Context.Session.Rollback">
            <summary>
            事物回滚
            </summary>
        </member>
        <member name="M:Easy4net.Context.Session.GetTransaction">
            <summary>
            获取当前的事物
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Insert``1(``0)">
            <summary>
            Insert插入操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">数据库表实体对象</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Insert``1(System.Collections.Generic.List{``0})">
            <summary>
            批量进行Insert插入操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityList">数据库表实体对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Update``1(``0)">
            <summary>
            Update更新操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">数据库表实体对象</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Update``1(System.Collections.Generic.List{``0})">
            <summary>
            批量进行Update更新操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityList">数据库表实体对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.ExcuteSQL(System.String,Easy4net.Common.ParamMap)">
            <summary>
            执行一条带有参数集合的SQL语句
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="param">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.ExcuteSQL(System.String)">
            <summary>
            执行一条SQL语句
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.ExcuteStoredProcReturnString(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行存储过程返回输出结果
            </summary>
            <param name="storedProcName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.ExcuteStoredProc(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行存储过程返回输出结果
            </summary>
            <param name="storedProcName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.ExcuteSQLReturnDataSet(System.String)">
            <summary>
            执行SQL返回输出结果记录集
            </summary>
            <param name="storedProcName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Delete``1(``0)">
            <summary>
            进行Delete删除操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">数据库表实体对象</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Delete``1(System.Collections.Generic.List{``0})">
            <summary>
            批量进行Delete删除操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityList">数据库表实体对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Delete``1(System.Object)">
            <summary>
            根据主键值删除实体类对应数据库中的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">主键值</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Delete``1(System.Object[])">
            <summary>
            根据主键ID集合进行删除操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Count(System.String)">
            <summary>
            根据SQL语句获取记录数
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Count(System.String,Easy4net.Common.ParamMap)">
            <summary>
            通过自定义SQL语句查询记录数
            </summary>
            <param name="strSql"></param>
            <param name="param">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Find``1(System.String)">
            <summary>
            通过自定义SQL语句查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Find``1(System.String,Easy4net.Common.ParamMap)">
            <summary>
            通过自定义SQL语句查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strSQL"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.FindPage``1(System.String,Easy4net.Common.ParamMap)">
            <summary>
            分页查询返回分页结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strSQL"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.Get``1(System.Object)">
            <summary>
            通过主键ID查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.GetConnection">
            <summary>
            获取数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.Session.GetWillConnectionState">
            <summary>
            获取当前事物是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Context.SQLiteHelper">
            <summary>
            SQLite数据库帮助类
            </summary>
        </member>
        <member name="M:Easy4net.Context.SQLiteHelper.IsExistsTable(System.String)">
            <summary>
            获取是否存在指定的表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.SQLiteHelper.CreateTable(System.String)">
            <summary>
            根据SQL语句创建一个表
            </summary>
            <param name="strSQL"></param>
        </member>
        <member name="T:Easy4net.Context.SessionFactory">
            <summary>
            持久层对象获取帮助
            </summary>
        </member>
        <member name="M:Easy4net.Context.SessionFactory.GetSession(System.String)">
            <summary>
            根据数据库类型名获取对应的持久层对象
            </summary>
            <param name="connName"></param>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.SessionFactory.GetSession">
            <summary>
            获取MSSQL持久层对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Easy4net.Context.SessionThreadLocal">
            <summary>
            持久层线程池
            </summary>
        </member>
        <member name="M:Easy4net.Context.SessionThreadLocal.Set(Easy4net.Context.Session)">
            <summary>
            设置持久层到线程池
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Easy4net.Context.SessionThreadLocal.Get">
            <summary>
            从线程池获取持久层
            </summary>
            <returns></returns>
        </member>
        <member name="M:Easy4net.Context.SessionThreadLocal.Clear">
            <summary>
            清空线程池
            </summary>
        </member>
        <member name="T:MyExtensions">
             <summary>
            ExtString 的摘要说明
             </summary>
        </member>
        <member name="M:MyExtensions.ToFormatString(System.Decimal)">
            <summary>
            格式化数字，三位加逗号
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Add(System.Double,System.Double)">
            <summary>
            相加
            </summary>
            <param name="add1"></param>
            <param name="add2"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.sub(System.Double,System.Double)">
            <summary>
            相减
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.mul(System.Double,System.Double)">
            <summary>
            相乖
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.div(System.Double,System.Double)">
            <summary>
            相除
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Join1``1(``0[],System.String)">
            <summary>
            将数组转换为符号分隔的字符串
            </summary>
            <param name="arr"></param>
            <param name="split">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.RemoveSpace(System.String)">
            <summary>
            去除所有空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.IsPhone(System.String)">
            <summary>
            匹配3位或4位区号的电话号码，其中区号可以用小括号括起来，
            也可以不用，区号与本地号间可以用连字号或空格间隔，
            也可以没有间隔
            \(0\d{2}\)[- ]?\d{8}|0\d{2}[- ]?\d{8}|\(0\d{3}\)[- ]?\d{7}|0\d{3}[- ]?\d{7}
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.IsMobilePhone(System.String)">
            <summary>
            判断输入的字符串是否是一个合法的手机号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.In(System.Int32,System.Int32[])">
            <summary>
            判断一个整型是否包含在指定的值内
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.DBValueOrNull(System.String)">
            <summary>
            返回值或DBNull.Value
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.ToBoolean(System.String)">
            <summary>
            尝试转换为Boolean类型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.DateFormat(System.Object,System.String)">
            <summary>
            尝试格式化日期字符串
            </summary>
            <param name="date"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.ReplaceSql(System.String)">
            <summary>
            过滤sql
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyExtensions.ProcessSqlStr(System.String,System.Int32)" -->
        <member name="M:MyExtensions.ToChineseSpell(System.String)">
            <summary>
            获取汉字拼音的第一个字母
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.getSpell(System.String)">
            <summary>
            获取汉字拼音
            </summary>
            <param name="cnChar"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Interruption(System.String,System.Int32,System.String)">
            <summary>
            截取字符串，汉字两个字节，字母一个字节
            </summary>
            <param name="str">字符串</param>
            <param name="strLength">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.CutString(System.String,System.Int32,System.String)">
            <summary>
            截取字符串，汉字两个字节，字母一个字节
            </summary>
            <param name="str">字符串</param>
            <param name="strLength">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Left(System.String,System.Int32)">
            <summary>
            获取左边多少个字符
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Right(System.String,System.Int32)">
            <summary>
            获取右边多少个字符
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.Size(System.String)">
            <summary>
            得到实符串实际长度
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.RemoveHTML(System.String)">
              <summary>   
              去除HTML标记   
              </summary>   
              <param   name="NoHTML">包括HTML的源码   </param>   
              <returns>已经去除后的文字</returns>   
        </member>
        <member name="M:MyExtensions.RemoveScript(System.String)">
            <summary>
            过滤js脚本
            </summary>
            <param name="strFromText"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.RemovePageTag(System.String)">
            <summary>
            替换页面标签
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.GetImg(System.String)">
            <summary>
            取得html中的图片
            </summary>
            <param name="HTMLStr"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.GetImgs(System.String)">
            <summary>
            取得html中的所有图片
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.GetRandom(System.Int32)">
            <summary>
            产生随机字符串
            </summary>
            <returns>字符串位数</returns>
        </member>
        <member name="M:MyExtensions.InPunctuation(System.String)">
            <summary>
            字符串是否包含标点符号(不包括_下画线)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.RemovePunctuationOrEmpty(System.String)">
            <summary>
            去除字符串标点符号和空字符
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.ToDateWeekString(System.DateTime)">
            <summary>
            返回带星期的日期格式
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.ToDateTimeWeekString(System.DateTime)">
            <summary>
            返回带星期的日期时间格式
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:MyExtensions.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            计算第一个日期同第二个日期之间的时间差
            DateTime1-DateTime2
            </summary>
            <param name="DateTime1"></param>
            <param name="DateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.HtmlEncode(System.String)">
            <summary>
            HTML编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.UrlEncode(System.String)">
            <summary>
            URL编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.MapPathExt(System.Web.HttpServerUtility,System.String)">
            <summary>
            获取与 Web 服务器上的指定虚拟路径相对应的物理文件路径。
            </summary>
            <param name="Server"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MyExtensions.SetCDataValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            使用CDATA的方式将value保存在指定的element中
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:MyExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            返回一个值，该值指示指定的 System.String 对象是否出现在此字符串中。
            </summary>
            <param name="source"></param>
            <param name="value">要搜寻的字符串。</param>
            <param name="comparisonType">指定搜索规则的枚举值之一</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false</returns>
        </member>
        <member name="M:MyExtensions.Contains(System.String[],System.String,System.StringComparison)">
            <summary>
            通过使用默认的相等或字符比较器确定序列是否包含指定的元素。
            </summary>
            <param name="source">要在其中定位某个值的序列。</param>
            <param name="value">要在序列中定位的值。</param>
            <param name="comparisonType">指定搜索规则的枚举值之一</param>
            <exception cref="T:System.ArgumentNullException">source 为 null</exception>
            <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:MyExtensions.Serialize(System.Object)">
            <summary>
            序列化对象为xml字符串
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>xml格式字符串</returns>
        </member>
        <member name="M:MyExtensions.ClickDisabled(System.Web.UI.WebControls.Button,System.String)">
            <summary>
            让服务器按钮点击后变灰
            </summary>
            <param name="button"></param>
            <param name="newText">点后的显示文本</param>
        </member>
        <member name="M:MyExtensions.IsMobileDevice(System.String)">
            <summary>
            判断访问的设备是否为手机
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
